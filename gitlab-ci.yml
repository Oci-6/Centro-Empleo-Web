image: docker:20.10.2

stages:
  - build
  - deploy

build_image_testing:
  stage: build
  before_script:
    - apk add --no-cache tzdata 
    - export DATESTAMPCOMMIT=$(echo $CI_COMMIT_TIMESTAMP | cut -c1-4)$(echo $CI_COMMIT_TIMESTAMP | cut -c6-7)$(echo $CI_COMMIT_TIMESTAMP | cut -c9-10)
    - export VERSION=$(echo $DATESTAMPCOMMIT.$CI_PIPELINE_IID.$CI_COMMIT_SHORT_SHA)
    - echo $VERSION
    - export ENVIRONMENT_NAME=$(echo $CI_ENVIRONMENT_SLUG)
    - export APP_NAME=ccisj-empleo
    - echo $APP_NAME
    - export STACK_NAME=ccisj-empleo
    - echo $STACK_NAME
  environment:
    name: test
  services:
    - docker:20.10.2-dind
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build --pull -t $CI_REGISTRY_IMAGE/$ENVIRONMENT_NAME:$VERSION .
    - docker push $CI_REGISTRY_IMAGE/$ENVIRONMENT_NAME:$VERSION
  only:
    - testing


deploy_test:
  stage: deploy
  before_script:
    - apk add --no-cache tzdata 
    - export DATESTAMPCOMMIT=$(echo $CI_COMMIT_TIMESTAMP | cut -c1-4)$(echo $CI_COMMIT_TIMESTAMP | cut -c6-7)$(echo $CI_COMMIT_TIMESTAMP | cut -c9-10)
    - export VERSION=$(echo $DATESTAMPCOMMIT.$CI_PIPELINE_IID.$CI_COMMIT_SHORT_SHA)
    - echo $VERSION
    - export ENVIRONMENT_NAME=$(echo $CI_ENVIRONMENT_SLUG)
    - export APP_NAME=ccisj-empleo
    - echo $APP_NAME
    - export STACK_NAME=ccisj-empleo
    - echo $STACK_NAME
  services:
    - docker:20.10.2-dind
  environment:
    name: test
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker stack deploy -c docker-compose.$CI_ENVIRONMENT_SLUG.yml --with-registry-auth $STACK_NAME
  only:
    - testing
  when: manual

build_image_prod:
  stage: build
  before_script:
    - apk add --no-cache tzdata 
    - export DATESTAMPCOMMIT=$(echo $CI_COMMIT_TIMESTAMP | cut -c1-4)$(echo $CI_COMMIT_TIMESTAMP | cut -c6-7)$(echo $CI_COMMIT_TIMESTAMP | cut -c9-10)
    - export VERSION=$(echo $DATESTAMPCOMMIT.$CI_PIPELINE_IID.$CI_COMMIT_SHORT_SHA)
    - echo $VERSION
    - export ENVIRONMENT_NAME=$(echo $CI_ENVIRONMENT_SLUG)
    - export APP_NAME=ccisj-empleo
    - echo $APP_NAME
    - export STACK_NAME=ccisj-empleo
    - echo $STACK_NAME
  environment:
    name: prod
  services:
    - docker:20.10.2-dind
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build --pull -t $CI_REGISTRY_IMAGE/$ENVIRONMENT_NAME:$VERSION .
    - docker push $CI_REGISTRY_IMAGE/$ENVIRONMENT_NAME:$VERSION
  only:
    - master

deploy_prod:
  stage: deploy
  variables:
    DOCKER_HOST: ssh://root@$PRODUCTION_HOST
  before_script:
    - apk update
    - apk add --no-cache tzdata
    - apk add --no-cache curl
    - apk add --no-cache openssh
    - export DATESTAMPCOMMIT=$(echo $CI_COMMIT_TIMESTAMP | cut -c1-4)$(echo $CI_COMMIT_TIMESTAMP | cut -c6-7)$(echo $CI_COMMIT_TIMESTAMP | cut -c9-10)
    - export VERSION=$(echo $DATESTAMPCOMMIT.$CI_PIPELINE_IID.$CI_COMMIT_SHORT_SHA)
    - echo $VERSION
    - eval $(ssh-agent -s)
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_PROD_KEY" > /tmp/key.pem && chmod 600 /tmp/key.pem
    - ssh-add /tmp/key.pem
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config' 
    - export APP_NAME=ccisj-empleo
    - echo $APP_NAME
    - export STACK_NAME=ccisj-empleo
    - echo $STACK_NAME
  services:
    - docker:20.10.2-dind
  environment:
    name: prod
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker stack deploy -c docker-compose.$CI_ENVIRONMENT_SLUG.yml --with-registry-auth $STACK_NAME
  only:
    - master
  when: manual
